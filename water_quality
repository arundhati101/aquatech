import pandas as pd
import numpy as np

# Set random seed for reproducibility
np.random.seed(42)

# Number of samples
n_samples = 1000

# Generate safe water samples (slightly more to account for class balance)
safe_samples = pd.DataFrame({
    'pH': np.random.normal(7.2, 0.2, n_samples//2),  # Normal pH range
    'Turbidity': np.random.normal(2.5, 0.2, n_samples//2),  # Low turbidity
    'Dissolved_Oxygen': np.random.normal(8.0, 0.4, n_samples//2),  # High DO
    'Lead': np.random.normal(0.004, 0.001, n_samples//2),  # Low lead
    'TDS': np.random.normal(250, 15, n_samples//2),  # Moderate TDS
    'EC': np.random.normal(0.3, 0.05, n_samples//2),  # Normal EC
    'Temperature': np.random.normal(20, 2, n_samples//2),  # Normal temp
    'Nitrate': np.random.normal(5, 0.75, n_samples//2),  # Low nitrate
    'Phosphate': np.random.normal(0.06, 0.1, n_samples//2),  # Low phosphate
    'Safe': 1
})

# Generate unsafe water samples with clearly distinct parameters
unsafe_samples = pd.DataFrame({
    'pH': np.concatenate([
        np.random.normal(5.0, 0.3, n_samples//4),  # Acidic
        np.random.normal(9.0, 0.3, n_samples//4)   # Basic
    ]),
    'Turbidity': np.random.normal(15.0, 3.0, n_samples//2),  # High turbidity
    'Dissolved_Oxygen': np.random.normal(3.0, 0.8, n_samples//2),  # Low DO
    'Lead': np.random.normal(0.02, 0.005, n_samples//2),  # High lead
    'TDS': np.random.normal(1500, 200, n_samples//2),  # High TDS
    'EC': np.random.normal(2.0, 0.3, n_samples//2),  # High EC
    'Temperature': np.random.normal(35, 3, n_samples//2),  # High temp
    'Nitrate': np.random.normal(50, 10, n_samples//2),  # High nitrate
    'Phosphate': np.random.normal(2.5, 0.5, n_samples//2),  # High phosphate
    'Safe': 0
})

# Combine safe and unsafe samples
data = pd.concat([safe_samples, unsafe_samples], ignore_index=True)

# Add some noise to make the classification task more realistic (but still achievable)
noise_mask = np.random.choice([True, False], size=len(data), p=[0.05, 0.95])
data.loc[noise_mask, 'Safe'] = 1 - data.loc[noise_mask, 'Safe']

# Shuffle the dataset
data = data.sample(frac=1, random_state=42).reset_index(drop=True)

# Save to CSV
data.to_csv('sample_water_quality_balanced.csv', index=False)

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 1: Load the dataset
data = pd.read_csv('sample_water_quality_balanced.csv')

# Step 2: Prepare the data
# Including additional sensor parameters as features
X = data[['pH', 'Turbidity', 'Dissolved_Oxygen', 'Lead', 'TDS', 'EC', 'Temperature', 'Nitrate', 'Phosphate']]  # Features
y = data['Safe']  # Labels (Safe or Unsafe)

# Step 3: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 4: Train the Logistic Regression model
model = LogisticRegression(max_iter=200)  # Increased max_iter for convergence
model.fit(X_train, y_train)

# Step 5: Evaluate the model
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Step 6: Function to predict water quality based on new sensor readings
def predict_water_quality(pH, turbidity, dissolved_oxygen, lead, tds, ec, temperature, nitrate, phosphate):
    new_data = [[pH, turbidity, dissolved_oxygen, lead, tds, ec, temperature, nitrate, phosphate]]
    prediction = model.predict(new_data)[0]
    if prediction == 1:
        print("Water is SAFE for use.")
    else:
        print("Water is UNSAFE for use.")

# Step 7: Simulate new sensor readings
print("\nSimulated Prediction:")
# Example sensor readings
predict_water_quality(7.2, 3.8, 5.5, 0.005, 300, 0.5, 25, 10, 0.8)
