import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Set random seed for reproducibility
np.random.seed(42)

# Generate data for one year (daily measurements)
n_days = 365

def generate_seasonal_pattern(n_days):
    """Generate seasonal pattern with peak in summer"""
    return np.sin(np.linspace(0, 2*np.pi, n_days))

def add_noise(base_signal, noise_level=0.1):
    """Add random noise to a signal"""
    return base_signal + np.random.normal(0, noise_level, len(base_signal))

# Generate dates for one year
base_date = datetime(2024, 1, 1)
dates = [base_date + timedelta(days=x) for x in range(n_days)]

# Generate seasonal base patterns
seasonal_pattern = generate_seasonal_pattern(n_days)

# 1. Temperature (°C)
temp_base = 20 + 15 * seasonal_pattern  # Base temperature varying from 5°C to 35°C
temperature = add_noise(temp_base, 2)
temperature = np.clip(temperature, -5, 40)

# 2. Humidity (%)
# Humidity is inversely related to temperature
humidity_base = 70 - 20 * seasonal_pattern
humidity = add_noise(humidity_base, 5)
humidity = np.clip(humidity, 30, 100)

# 3. Rainfall (mm)
# More rainfall in spring/fall, less in summer/winter
rainfall_prob = np.random.random(n_days)
rainfall = np.zeros(n_days)
rainfall_pattern = -np.absolute(seasonal_pattern) + 1  # More rain in spring/fall
rainfall[rainfall_prob < 0.3] = np.random.exponential(5, sum(rainfall_prob < 0.3)) * (rainfall_pattern[rainfall_prob < 0.3] + 0.5)
rainfall = np.clip(rainfall, 0, 100)

# 4. Wind Speed (m/s)
wind_base = 5 + 2 * np.sin(np.linspace(0, 8*np.pi, n_days))  # Base wind pattern
wind_speed = add_noise(wind_base, 1)
wind_speed = np.clip(wind_speed, 0, 20)

# 5. Soil Moisture (%)
# Affected by rainfall and temperature
soil_moisture_base = 30 + 0.3 * np.cumsum(rainfall) - 0.2 * temperature
soil_moisture = add_noise(soil_moisture_base, 2)
soil_moisture = np.clip(soil_moisture, 10, 100)
# Reset cumulative effect periodically
soil_moisture = soil_moisture - np.floor(np.linspace(0, 4, n_days)) * 20

# 6. Solar Radiation (W/m²)
solar_base = 500 + 300 * seasonal_pattern
solar_radiation = add_noise(solar_base, 50)
solar_radiation = np.clip(solar_radiation, 0, 1000)

# 7. Evapotranspiration Rate (mm/day)
# Affected by temperature, wind speed, and solar radiation
evapotranspiration = (0.0023 * solar_radiation/50 + 0.1 * temperature + 0.2 * wind_speed)
evapotranspiration = add_noise(evapotranspiration, 0.5)
evapotranspiration = np.clip(evapotranspiration, 0, 15)

# 8. Crop Growth Stage (0-5)
# 0: Pre-planting, 1: Emergence, 2: Vegetative, 3: Flowering, 4: Yield Formation, 5: Maturity
growth_days = np.linspace(0, 5, n_days)
crop_growth_stage = np.floor(growth_days)
# Reset for multiple growing seasons
crop_growth_stage = crop_growth_stage % 6

# 9. Cloud Cover (%)
# Inversely related to solar radiation, correlated with rainfall
cloud_cover_base = 100 - (solar_radiation/1000 * 100)
cloud_cover = add_noise(cloud_cover_base, 10)
cloud_cover = np.clip(cloud_cover, 0, 100)

# 10. Dew Point (°C)
# Calculate dew point using simplified formula
dew_point = temperature - ((100 - humidity)/5)
dew_point = np.clip(dew_point, -10, 30)

# Create DataFrame
data = {
    'Date': dates,
    'Temperature': np.round(temperature, 2),
    'Humidity': np.round(humidity, 2),
    'Rainfall': np.round(rainfall, 2),
    'Wind_Speed': np.round(wind_speed, 2),
    'Soil_Moisture': np.round(soil_moisture, 2),
    'Solar_Radiation': np.round(solar_radiation, 2),
    'Evapotranspiration': np.round(evapotranspiration, 2),
    'Crop_Growth_Stage': crop_growth_stage.astype(int),
    'Cloud_Cover': np.round(cloud_cover, 2),
    'Dew_Point': np.round(dew_point, 2)
}

df = pd.DataFrame(data)

# Add some derived features
df['Month'] = df['Date'].dt.month
df['Day'] = df['Date'].dt.day
df['Season'] = pd.cut(df['Month'],
                     bins=[0, 3, 6, 9, 12],
                     labels=['Winter', 'Spring', 'Summer', 'Fall'])

# Calculate growing degree days (GDD)
df['GDD'] = np.maximum(0, (df['Temperature'] - 10))  # Base temperature of 10°C

# Save the dataset
df.to_csv('agricultural_weather_data.csv', index=False)

# Display sample statistics
print("\nDataset Preview:")
print(df.head())
print("\nDescriptive Statistics:")
print(df.describe())

# Calculate and display correlations
correlations = df.select_dtypes(include=[np.number]).corr()
print("\nKey Correlations:")
print(correlations['Temperature'].sort_values(ascending=False))

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Set random seed for reproducibility
np.random.seed(42)

# Generate sample data (similar to previous dataset but adapted for classification)
n_samples = 1000

def generate_agricultural_data():
    # Generate base features
    temperature = np.random.normal(25, 5, n_samples)
    humidity = np.random.normal(60, 15, n_samples)
    rainfall = np.random.exponential(5, n_samples)
    wind_speed = np.random.normal(8, 2, n_samples)
    soil_moisture = np.random.normal(50, 10, n_samples)
    solar_radiation = np.random.normal(500, 100, n_samples)
    evapotranspiration = np.random.normal(5, 1, n_samples)
    crop_growth_stage = np.random.randint(0, 6, n_samples)
    cloud_cover = np.random.normal(50, 20, n_samples)
    dew_point = np.random.normal(15, 3, n_samples)

    # Clip values to realistic ranges
    temperature = np.clip(temperature, 10, 40)
    humidity = np.clip(humidity, 30, 100)
    rainfall = np.clip(rainfall, 0, 50)
    wind_speed = np.clip(wind_speed, 0, 20)
    soil_moisture = np.clip(soil_moisture, 10, 90)
    solar_radiation = np.clip(solar_radiation, 0, 1000)
    evapotranspiration = np.clip(evapotranspiration, 0, 10)
    cloud_cover = np.clip(cloud_cover, 0, 100)
    dew_point = np.clip(dew_point, 5, 25)

    # Calculate water demand (complex relationship)
    water_demand = (
        0.3 * temperature +
        -0.2 * humidity +
        -0.15 * rainfall +
        0.1 * wind_speed +
        -0.2 * soil_moisture +
        0.15 * solar_radiation/100 +
        0.2 * evapotranspiration +
        0.1 * crop_growth_stage +
        -0.05 * cloud_cover +
        0.1 * dew_point
    )

    # Add some noise
    water_demand += np.random.normal(0, 1, n_samples)

    # Convert to binary classification (1 for high water demand, 0 for low)
    water_demand_binary = (water_demand > np.median(water_demand)).astype(int)

    return (temperature, humidity, rainfall, wind_speed, soil_moisture,
            solar_radiation, evapotranspiration, crop_growth_stage,
            cloud_cover, dew_point, water_demand_binary)

# Generate data
(temperature, humidity, rainfall, wind_speed, soil_moisture,
 solar_radiation, evapotranspiration, crop_growth_stage,
 cloud_cover, dew_point, water_demand) = generate_agricultural_data()

# Create DataFrame
data = pd.DataFrame({
    'Temperature': temperature,
    'Humidity': humidity,
    'Rainfall': rainfall,
    'Wind_Speed': wind_speed,
    'Soil_Moisture': soil_moisture,
    'Solar_Radiation': solar_radiation,
    'Evapotranspiration': evapotranspiration,
    'Crop_Growth_Stage': crop_growth_stage,
    'Cloud_Cover': cloud_cover,
    'Dew_Point': dew_point,
    'High_Water_Demand': water_demand
})

# Save the dataset
data.to_csv('agricultural_weather_classification.csv', index=False)

# Prepare data for modeling
X = data.drop('High_Water_Demand', axis=1)
y = data['High_Water_Demand']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train logistic regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train_scaled, y_train)

# Make predictions
y_pred = model.predict(X_test_scaled)

# Print performance metrics
print("\nModel Performance Metrics:")
print("-------------------------")
print(f"Accuracy: {accuracy_score(y_test, y_pred):.4f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Feature importance
feature_importance = pd.DataFrame({
    'Feature': X.columns,
    'Importance': np.abs(model.coef_[0])
})
print("\nFeature Importance:")
print(feature_importance.sort_values('Importance', ascending=False))

# Example prediction
example_data = np.array([[
    28,     # Temperature
    65,     # Humidity
    5,      # Rainfall
    8,      # Wind Speed
    45,     # Soil Moisture
    600,    # Solar Radiation
    4.5,    # Evapotranspiration
    3,      # Crop Growth Stage
    40,     # Cloud Cover
    18      # Dew Point
]])

# Scale the example data
example_scaled = scaler.transform(example_data)
prediction = model.predict(example_scaled)
prediction_prob = model.predict_proba(example_scaled)

print("\nExample Prediction:")
print("-----------------")
print(f"Prediction: {'High' if prediction[0] == 1 else 'Low'} Water Demand")
print(f"Probability of High Water Demand: {prediction_prob[0][1]:.2f}")
